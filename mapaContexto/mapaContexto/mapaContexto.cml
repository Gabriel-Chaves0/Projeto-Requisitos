
//**Domínio:** Adoção de animais de estimação
//
//O sistema (nome do sistema) tem como principal objetivo conectar pessoas interessadas em adotar algum animal de estimação e os responsáveis pela adoção deles. 
//
//O sistema é composto por diversas funcionalidades para melhorar a experiência do usuário como: recomendação de animais de acordo com o perfil do 
//adotante, relatórios de acompanhamento dos status do animal que permite monitorar e registrar o estado e a situação dos animais ao longo do tempo, 
//pesquisas de animais com filtros (raça, comportamento, proximidade…), agenda de visitas ao abrigo, avaliação abrigos, planos de cuidados 
//personalizados, gestão de doações e voluntariado, e integração com redes sociais.
//
//O projeto abrange todos os envolvidos no processo da adoção do animal, ou seja: abrigos responsáveis por disponibilizar os animais, os usuários adotantes ou 
//interessados em adotar, os animais envolvidos e os responsáveis pela divulgação dos animais.
//
//A principal missão do nosso sistema é facilitar e agilizar esse processo, mantendo um alto cuidado com os animais e oferecendo suporte quando necessário a 
//todos os envolvidos nesse meio. Criando um ambiente seguro e acolhedor, onde cada adoção seja feita com responsabilidade e transparência, garantindo que os animais 
//encontrem lares amorosos e adequados, enquanto os adotantes têm acesso a toda a orientação e apoio necessários para cuidar de seus novos companheiros.



Domain SistemaAdocao {
	Subdomain Adocao
	Subdomain Voluntariado

}

ContextMap {
	contains Adocao
	contains Voluntariado
	
	Adocao Shared-Kernel Voluntariado
}


BoundedContext Adocao implements Adocao{
	
	Aggregate Abrigo {
		Service GetAnimais {
			List<@Animal> getAnimaisAbrigo();
		}
		
		
		Entity Abrigo {
			aggregateRoot
			
			-IdAbrigo id_abrigo
			-Endereco endereco_abrigo
			-Contato contato_abrigo
			String nome_abrigo
			-List<IdAnimal> animais_abrigados
			-List<IdPessoa> funcionariosAbrigo
			int capacidadeAbrigo
			
			def boolean isMaxCapacity();
			def void setNomeAbrigo(String nomeAbrigo);
			def String getNomeAbrigo();
			def Contato getContatoAbrigo();
			def void setContatoAbrigo(@Contato contatoAbrigo);
			def int getCapacidadeAbrigo();
			def void setCapacidadeAbrigo(int capacidadeAbrigo);
			def List<Pessoa> getFuncionariosAbrigo();
			def List<@Animal> getAnimaisAbrigo();
			
			
			Repository AbrigoRepository {
				void salvar(@Abrigo abrigo);
				void editar(@Abrigo abrigo);
				void remover(@IdAbrigo id_abrigo); 
				@Abrigo obterPorId(@IdAbrigo idAbrigo);
				List<@Abrigo> showAbrigos;  
			}
		}
		ValueObject IdAbrigo {
			int id_abrigo
			def int getId();
		}
		ValueObject Endereco {
			String cidade
			String rua
			def String getRua();
			def String getCidade();
		}
		ValueObject Contato {
			String telefone
			String email_contato
			def String getEmail();
			def String getTelefone();
		}
	}
	
	
	
	Aggregate Animal {
		Service InfoAdotante {
			@IdPessoa getIdAdotante();
			void setIdAdotante(@IdPessoa idAdotante);
		}
		Service GetAbrigo {
			@IdAbrigo getIdAbrigo();
		}
		
		Entity Animal {
			aggregateRoot
			
			-IdAnimal id_animal
			-IdAbrigo id_abrigo
			-IdPessoa id_adotante nullable
			-SaudeAnimal saude_animal nullable
			String nome_animal
			String idade_animal
			String especie
			String raca
			-Porte porte
			-Sexo sexo
			Boolean foi_adotado;
			
			def IdAnimal getIdAnimal();
			def String getNomeAnimal();
			def void setNomeAnimal(String nomeAnimal);
			def String getIdadeAnimal();
			def String getEspecie();
			def String getRaca();
			def String getPorte();
			def String getSexo();
			def Boolean getAdotado();
			def void setAdotado(Boolean adotado);
			def SaudeAnimal getSaudeAnimal();
			def void setSaudeAnimal(@SaudeAnimal saudeAnimal);
			def @IdPessoa getIdAdotante();
			def void setIdAdotante(@IdPessoa idAdotante);
			def @IdAbrigo getIdAbrigo();
			
			
			Repository AnimalRepository {
				void salvar(@Animal animal);
			    @Animal obterPorId(@IdAnimal id);
			    void remover(@IdAnimal id);
			    void editar(@Animal animal); 
			}
		}
		
		ValueObject IdAnimal {
			int id_animal
			def int getId();
		}
		ValueObject SaudeAnimal {
			boolean vacina_raiva
			boolean vermifugado
			boolean castrado
			def boolean isVacinaRaiva();
			def void setVacinaRaiva(boolean vacinaRaiva);
			def boolean isVermifugado();
			def void setVermifugado(boolean vermifugado);
			def boolean isCastrado();
			def void setCastrado(boolean castrado);
		}
		
		enum Porte{
			EQUENO, MEDIO, GRANDE
		}
		enum Sexo{
			MACHO, FEMEA
		}
	}
	
	
	
	Aggregate Pessoa {
		Entity Pessoa {
			aggregateRoot
			
			-IdPessoa id_pessoa
			-Endereco endereco_pessoa
			-Contato contato_pessoa
			-List<IdAnimal> animais_adotados
			String nome_pessoa
			String cpf
			Date data_pessoa
			-Preferencias preferencias
			
			def Preferencias getPreferencias();
			def void setPreferencias(@Preferencias preferencias);
			def IdPessoa getIdPessoa();
			def Endereco getEnderecoPessoa();
			def void setEnderecoPessoa(@Endereco enderecoPessoa);
			def Contato getContatoPessoa();
			def void setContatoPessoa(@Contato contatoPessoa);
			def String getNomePessoa();
			def void setNomePessoa(String nomePessoa);
			def String getCpf();
			def Date getDataPessoa();
			
			
			Repository PessoaRepository {
			    void salvar(@Pessoa pessoa);
			    void editar(@Pessoa pessoa);
			    @Pessoa obterPorId(@IdPessoa idPessoa);
			}
		}
		
		ValueObject IdPessoa {
			int id_pessoa
			
			def int getId();
		}
		ValueObject Preferencias {
			List<String> especies;
			List<String> racas;
			List<String> portes;
			List<String> sexos;
			
			def List<String> getEspecies();
			def void setEspecies(List<String> especies);
			def List<String> getRacas();
			def void setRacas(List<String> racas);
			def List<String> getPortes();
			def void setPortes(List<String> portes);
			def List<String> getSexos();
			def void setSexos(List<String> sexos);
		}
	}
}


BoundedContext Voluntariado implements Voluntariado {

	Aggregate Voluntario {
		Service InfoAbrigo{
			void associarAbrigo(@Abrigo abrigo);
			void desassociarAbrigo(@Abrigo abrigo);
			List<@Abrigo> getAbrigosAssociados();
		}
		
		Entity Voluntario extends Pessoa {
			aggregateRoot
			
			-List<Abrigo> abrigosAssociados
			
			def void associarAbrigo(@Abrigo abrigo);
			def void desassociarAbrigo(@Abrigo abrigo);
			def List<@Abrigo> getAbrigosAssociados();
			
			
			Repository VoluntarioRepository {
				void salvar(@Voluntario voluntario);
    			void editar(@Voluntario voluntario);
    			@Voluntario obterVoluntarioPorId(@IdPessoa idVoluntario);

    			List<Voluntarios> listarVoluntarios();
			}
		}
	}
}

